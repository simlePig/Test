{"version":3,"sources":["assets/Test.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n// 颜色种类\nconst colorType = [\"yellow\", \"blue\", \"red\", \"green\", \"white\"];\n\n// 格子种类\nconst girdType = {\n    // 黄\n    \"yellow\": \"prefabs/yellow\",\n    // 蓝\n    \"blue\": \"prefabs/blue\",\n    // 红\n    \"red\": \"prefabs/red\",\n    // 绿\n    \"green\": \"prefabs/green\",\n    // 白\n    \"white\": \"prefabs/white\"\n}\n\n// 宽 、高\nconst width = 10;\nconst height = 10;\n\n\nlet probabilities: { [color: string]: number } = {\n    red: 0.2,\n    green: 0.2,\n    blue: 0.2,\n    yellow: 0.2,\n    white: 0.2,\n};\n\n@ccclass\nexport default class Test extends cc.Component {\n\n    @property(cc.EditBox)\n    x_editBox: cc.EditBox = null;\n\n    @property(cc.EditBox)\n    y_editBox: cc.EditBox = null;\n\n    @property(cc.Node)\n    buttonNode: cc.Node = null;\n\n    private animation: cc.Animation = null;\n    protected onLoad(): void {\n        this.animation = this.buttonNode.getComponent(cc.Animation)\n        let animState = this.animation.play('button_show');\n        animState.speed = 0.8;\n    }\n    onAnimationEvent(event) {\n        cc.log('zwx     xxxx',event);\n    }\n    /**\n     * 动画按钮表现完毕\n     */\n    onShowEnd() {\n        cc.log('zwx         按钮出现完毕');\n        // 调用按钮待机动画\n        this.animation.play('button_standy');\n    }\n\n    /**\n     * 动画按钮点击完毕\n     */\n    onClickEnd() {\n        cc.log('zwx         按钮点击完毕');\n        this.animation.play('button_standy');\n    }\n\n    /**\n     * 点击生成\n     */\n    generateGird() {\n        this.animation.play('button_click');\n\n        cc.log('zwx         x_editBox:', this.x_editBox.string);\n        cc.log('zwx         y_editBox:', this.y_editBox.string);\n\n        let X = parseInt(this.x_editBox.string);\n\n        let Y = parseInt(this.y_editBox.string);\n\n        if(!X || !Y) {\n            return;\n        }\n        // ====================== 错误思路 ======================\n        // // X轴\n        // for (let i = 0; i < width; i++) {\n        //     // Y轴 \n        //     for (let j = height; j > 0; j--) {\n        //         let color: string = '';\n        //         if (i == 0 && j == height) {\n        //             // 随机一个颜色\n        //             color = this.getRandomColor(probabilities);\n        //             colorsArr.push(color);\n        //         } else {\n        //             // 第一行\n        //             if (j == height && i > 0) {\n        //                 cc.log('zwx     第一行');\n        //                 // 根据左边格子颜色随机当前格子颜色\n        //                 let leftGirdColor = colorsArr[i * 9];\n        //                 probabilities[leftGirdColor] += X / 100;\n        //                 let otherColorsProbability = (1 - probabilities[leftGirdColor]) / 4;\n        //                 for (let key in probabilities) {\n        //                     if (key != leftGirdColor) {\n        //                         probabilities[key] = otherColorsProbability;\n        //                     }\n        //                 }\n        //                 color = this.getRandomColor(probabilities);\n        //                 colorsArr.push(color);\n        //             }\n\n        //             // 第一列\n        //             if (i == 0 && j < height) {\n        //                 cc.log('zwx     第一列');\n        //                 let aboveGirdColor = colorsArr[height - j];\n        //                 probabilities[aboveGirdColor] += X / 100;\n        //                 let otherColorsProbability = (1 - probabilities[aboveGirdColor]) / 4;\n        //                 for (let key in probabilities) {\n        //                     if (key != aboveGirdColor) {\n        //                         probabilities[key] = otherColorsProbability;\n        //                     }\n        //                 }\n        //                 color = this.getRandomColor(probabilities);\n        //                 colorsArr.push(color);\n        //             }\n\n        //             // 既不是第一列，也不是第一行\n        //             if (i > 0 && j < height) {\n\n        //             }\n        //         }\n        //         if (color != '') {\n        //             cc.resources.load(girdType[color], cc.Prefab,\n        //                 (err, prefabRes: cc.Prefab) => {\n        //                     if (err) {\n        //                         cc.log('err', err);\n        //                     } else {\n        //                         let gird = cc.instantiate(prefabRes);\n        //                         this.node.addChild(gird);\n        //                         cc.log('zwx             j*20', j * 20, color)\n        //                         gird.setPosition(cc.v2(i * 20 - 100, j * 20));\n        //                     }\n        //                 });\n        //         }\n        //     }\n        // }\n\n        let colorsArr = Array(100);\n        // （m,n-1)所属颜色的概率增加 ×%\n        // （m-1,n)所属颜色的概率增加 ×%\n        // 若(m,n- 1)和（m- 1,n)同色，则该颜色的概率只增加 y% \n        // 其他颜色平分剩下的概率\n\n        // 第一行颜色填充\n        for (let i = 0; i < width; i++) {\n            let color: string = '';\n            if (i == 0) {\n                // 随机一个颜色\n                color = this.getRandomColor(probabilities);\n                colorsArr[0] = color;\n            } else {\n                let leftGirdColor = colorsArr[i - 1];\n                probabilities[leftGirdColor] += X / 100;\n                let otherColorsProbability = (1 - probabilities[leftGirdColor]) / 4;\n                for (let key in probabilities) {\n                    if (key != leftGirdColor) {\n                        probabilities[key] = otherColorsProbability;\n                    }\n                }\n                color = this.getRandomColor(probabilities);\n                this.resetColorProbability();\n                colorsArr[i] = color;\n            }\n        }\n        // 第一列的颜色填充\n        for (let i = 1; i < height; i++) {\n            let color: string = '';\n            let aboveGirdColor = colorsArr[i - 1];\n            probabilities[aboveGirdColor] += X / 100;\n            let otherColorsProbability = (1 - probabilities[aboveGirdColor]) / 4;\n            for (let key in probabilities) {\n                if (key != aboveGirdColor) {\n                    probabilities[key] = otherColorsProbability;\n                }\n            }\n            color = this.getRandomColor(probabilities);\n            this.resetColorProbability();\n            colorsArr[i * 10] = color;\n        }\n        // 剩下所有的颜色根据第一行/第一列进行填充\n        for (let i = 0; i < colorsArr.length; i++) {\n            if (colorsArr[i] == null) {\n                let color = '';\n                // 判断该位置上、左的颜色是否相同\n                if (colorsArr[i - 10] === colorsArr[i - 1]) {\n                    let leftGirdColor = colorsArr[i - 1];\n                    probabilities[leftGirdColor] += Y / 100;\n                    let otherColorsProbability = (1 - probabilities[leftGirdColor]) / 4;\n                    for (let key in probabilities) {\n                        if (key != leftGirdColor) {\n                            probabilities[key] = otherColorsProbability;\n                        }\n                    }\n                    color = this.getRandomColor(probabilities);\n                    this.resetColorProbability();\n                    colorsArr[i] = color;\n                } else {\n                    // 不相同，设置颜色概率\n                    let leftGirdColor = colorsArr[i - 1];\n                    let aboveGirdColor = colorsArr[i - 10];\n                    probabilities[leftGirdColor] += X / 100;\n                    probabilities[aboveGirdColor] += X / 100;\n                    let otherColorsProbability = (1 - probabilities[leftGirdColor] - probabilities[aboveGirdColor]) / 3;\n                    for (let key in probabilities) {\n                        if (key != leftGirdColor && key != aboveGirdColor) {\n                            probabilities[key] = otherColorsProbability;\n                        }\n                    }\n                    color = this.getRandomColor(probabilities);\n                    this.resetColorProbability();\n                    colorsArr[i] = color;\n                }\n            }\n        }\n        // 根据填充完毕的数组进行节点表现\n        for (let i = 0; i < colorsArr.length; i++) {\n            cc.resources.load(girdType[colorsArr[i]], cc.Prefab,\n                (err, prefabRes: cc.Prefab) => {\n                    if (err) {\n                        cc.log('err', err);\n                    } else {\n                        let gird = cc.instantiate(prefabRes);\n                        this.node.addChild(gird);\n                        gird.setPosition(cc.v2((i % 10) * 20 - 100, (10 - Math.ceil((i + 1) / 10)) * 20));\n                    }\n                });\n        }\n    }\n\n    /**\n     * 随机一个颜色\n     * @param probabilities:权重分布对象\n     */\n    getRandomColor(probabilities): string {\n        const totalProbability = Object.values(probabilities).reduce((a: number, b: number) => a + b, 0);\n        cc.log('zwx     probabilities', probabilities);\n        // todo 小数点的规划跟判断\n        if (totalProbability !== 1) {\n            cc.error('概率计算错误', totalProbability);\n        }\n\n        const randomValue = Math.random();\n        let cumulativeProbability = 0;\n\n        for (const color of colorType) {\n            cumulativeProbability += probabilities[color];\n\n            if (randomValue <= cumulativeProbability) {\n                return color;\n            }\n        }\n    }\n\n    /**\n     * 重置颜色随机机率\n     */\n    resetColorProbability() {\n        for (let key in probabilities) {\n            probabilities[key] = 0.2;\n        }\n    }\n\n\n\n    /**\n     * 在n-m内随机一个数\n     */\n    getRandomInt(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n\n    // update (dt) {}\n}\n// 现有整型数组a、整型数組b、以及整型v，请编写函数，判断是否可以从a中选择一个数，从b中选择一个数，二者相加等于 V，如可以返回true，否则返回false。比如如下输入将返回 true，因为a中\n// 40 和b中2相加为 42。代码编写完毕后，用大O表示法分析一下代码的时间复杂度\n\n// 思路一 双层 for循环 暴力 查询 （时间复杂为n的二次方）\nfunction canSum(a: number[], b: number[], v: number): boolean {\n    for (let i = 0; i < a.length; i++) {\n        for (let j = 0; j < b.length; j++) {\n            if (a[i] + b[j] === v) {\n                return true;\n            }\n        }\n    }\n    return false;;\n}\n\n// 思路二  数组结构转为 二叉树结构\nclass TreeNode {\n    value: number;\n    left: TreeNode | null;\n    right: TreeNode | null;\n    constructor(value: number) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n\n// 先将数组转为二叉树\nfunction arrayToTree(arr: number[], index: number): TreeNode | null {\n    if (index > arr.length || arr[index] === null) {\n        return null;\n    }\n    const node = new TreeNode(arr[index]);\n    node.left = arrayToTree(arr, 2 * index + 1);\n    node.right = arrayToTree(arr, 2 * index + 2);\n    return node;\n}\n\n"]}